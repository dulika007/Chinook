@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using System.Security.Claims;
@using Chinook.Migrations
@using Chinook.Repositories.Interfaces
@using Playlist = Chinook.Models.Playlist
@inject INavMenuService NavMenuService

<div class="d-flex">
    <h1>Playlist <strong>@Playlist.Name</strong></h1>
    <a href="#" class="m-1" title="Edit" @onclick="@(() => OpenPlaylistEditDialog())" @onclick:preventDefault>
        <i class="bi bi-pencil-fill" ></i>
    </a>
    <a href="#" class="m-1" title="Edit" @onclick="@(() => OpenPlaylistDeleteDialog())" @onclick:preventDefault>
            <i class="bi bi-trash-fill" ></i>
        </a>
</div>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "My favorite tracks")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IPlaylistRepository PlaylistRepository { get; set; }
    [Inject] ITrackRepository TrackRepository { get; set; }
    [Inject] IUserPlaylistRepository UserPlaylistRepository { get; set; }
    
    private Modal PlaylistEditDialog { get; set; }
    private Modal PlaylistDeleteDialog { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private Playlist SelectedPlaylist;
    private Playlist _favouritePlaylistData;

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            await Initialize();
    }

    private async Task Initialize()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        // Create Playlist as My favorite tracks
        var favouritePlaylistResult = await PlaylistRepository.GetByNameAsync("My favorite tracks");
        if (favouritePlaylistResult is null)
        {
            favouritePlaylistResult = new Chinook.Models.Playlist()
            {
                PlaylistId = await PlaylistRepository.GetNewId(),
                Name = "My favorite tracks"
            };
            await PlaylistRepository.AddAsync(favouritePlaylistResult);
        }

        _favouritePlaylistData = favouritePlaylistResult;

        SelectedPlaylist = await PlaylistRepository.GetWithTracksAndAlbumAndArtistByIdAsync(PlaylistId);
        Playlist = new ClientModels.Playlist()
        {
            Name = SelectedPlaylist.Name,
            Tracks = SelectedPlaylist.Tracks.Select(t => new ClientModels.PlaylistTrack()
            {
                AlbumTitle = t.Album.Title,
                ArtistName = t.Album.Artist.Name,
                TrackId = t.TrackId,
                TrackName = t.Name,
                IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "My favorite tracks")).Any()
            }).ToList()
        };
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId) // Add Track as Favourite
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        
        var userId = await GetUserId();
        var trackData = await TrackRepository.GetByIdAsync(trackId);
        _favouritePlaylistData.Tracks.Add(trackData);

        var userPlaylistResult = await UserPlaylistRepository.GetByUserIdAndPlayId(userId, _favouritePlaylistData.PlaylistId);
        if (userPlaylistResult is null)
            await UserPlaylistRepository.AddAsync(new UserPlaylist() { UserId = userId, PlaylistId = _favouritePlaylistData.PlaylistId });
        else
            await TrackRepository.SaveAsync();

        track.IsFavorite = true;
        
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(long trackId) // Remove Track from Favourite
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        
        var trackData = await TrackRepository.GetByIdAsync(trackId);
        _favouritePlaylistData.Tracks.Remove(trackData);
        await TrackRepository.SaveAsync();

        track.IsFavorite = false;
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private async Task RemoveTrack(long trackId) // Remove track from play list
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        
        var trackData = await TrackRepository.GetByIdAsync(trackId);
        _favouritePlaylistData.Tracks.Remove(trackData);
        await TrackRepository.SaveAsync();

        Playlist.Tracks.Remove(track);
        track.IsFavorite = false;
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {_favouritePlaylistData.Name}.";
    }
    
    private void OpenPlaylistEditDialog() // Open edit pop up
    {
        CloseInfoMessage();
        PlaylistEditDialog.Open();
    }
    
    private void OpenPlaylistDeleteDialog() // Open delete pop up
    {
        CloseInfoMessage();
        PlaylistDeleteDialog.Open();
    }
    
    private async Task EditPlaylistName() // Play list name edit
    {
        CloseInfoMessage();
        await PlaylistRepository.SaveAsync();
        InfoMessage = $"Saved Successfully!";
        PlaylistEditDialog.Close();
        await NavMenuService.NotifyChanged();
    }
    
    private async Task DeletePlaylist() // Delete play list
    {
        CloseInfoMessage();
        await PlaylistRepository.DeleteAsync(SelectedPlaylist);
        InfoMessage = $"Saved Successfully!";
        PlaylistEditDialog.Close();
        NavigationManager.NavigateTo("/#", true);
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
@* Edit play list modal  *@
<Modal @ref="PlaylistEditDialog">
    <Title>
        Edit playlist
    </Title>
    <Body>
    <div class="form-group mb-2">
        <label for="NewPlaylistName">New Name</label>
        <input type="text" id="NewPlaylistName" class="form-control" placeholder="New name for the playlist" @bind="SelectedPlaylist.Name">
    </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="EditPlaylistName">Save</button>
    </Footer>
</Modal>

 @* Delete play list modal *@
<Modal @ref="PlaylistDeleteDialog">
    <Title>
        Delete playlist
    </Title>
    <Body>
    <div class="form-group mb-2">
        <label for="NewPlaylistName">Are you sure want to delete?</label>
        
    </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="DeletePlaylist">Save</button>
    </Footer>
</Modal>
